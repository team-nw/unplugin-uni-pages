import type { PagesConfig } from '../types'

import type { TabBarItem } from '../types/tabBar'
import { existsSync, readFileSync } from 'node:fs'

import { join } from 'node:path'
import { normalizePath } from 'vite'
import { writeFile } from './util'

export function getDeclaration(config: PagesConfig) {
  const subPagesPath = (config.subPackages || []).map((sub) => {
    return sub.pages.map(v => (`"/${normalizePath(join(sub.root, v.path))}"`))
  }).flat()
  const tabsPagesPath = config.pagesGlobConfig?.tabBar?.list?.map((v: TabBarItem) => {
    return `"/${v!.pagePath}"`
  }) ?? []
  const allPagesPath = [...(config.pages || []).filter(page => !tabsPagesPath.includes(page.path)).map(v => `"/${v.path}"`), ...subPagesPath]
  return `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by vite-plugin-uni-pages

interface NavigateToOptions {
  url: ${allPagesPath.join(' |\n       ')};
}
interface RedirectToOptions extends NavigateToOptions {}

interface SwitchTabOptions {
  ${tabsPagesPath.length ? `url: ${tabsPagesPath.join(' | ')}` : ''}
}

type ReLaunchOptions = NavigateToOptions | SwitchTabOptions;

declare interface Uni {
  navigateTo(options: UniNamespace.NavigateToOptions & NavigateToOptions): void;
  redirectTo(options: UniNamespace.RedirectToOptions & RedirectToOptions): void;
  switchTab(options: UniNamespace.SwitchTabOptions & SwitchTabOptions): void;
  reLaunch(options: UniNamespace.ReLaunchOptions & ReLaunchOptions): void;
}
`
}

export async function writeDeclaration(config: PagesConfig, filepath: string) {
  const originalContent = existsSync(filepath) ? readFileSync(filepath) as any : ''
  const code = getDeclaration(config)
  if (!code)
    return

  if (code !== originalContent)
    await writeFile(filepath, code)
}
